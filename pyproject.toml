[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "py-clean-arch"
version = "3.0.0"
description = ""
authors = ["cdddg2@gmail.com"]
readme = "README.md"
package-mode = false

[tool.poetry.dependencies]
python = "^3.10"
fastapi = "<=1.0.0"
injector = "^0.21.0"
pydantic = ">2.4.0,<3"
strawberry-graphql = "^0.204.0"
uvicorn = "^0.23.2"

[tool.poetry.group.dev.dependencies]
autoflake = "^2.2.1"
black = "^23.7.0"
isort = "^5.12.0"
pre-commit = "^3.3.3"
pylint = "^2.17.5"
pylint-quotes = "^0.2.3"
pyright = "^1.1.326"
remove-print-statements = "^0.5.2"
ruff = "^0.1.4"

[tool.poetry.group.test.dependencies]
gevent = "^23.7.0"
httpx = "^0.24.1"
pytest = "^7.4.0"
pytest-cov = "^4.1.0"
pytest-dependency = "^0.5.1"
pytest-env = "^0.8.2"

[tool.poetry.group.db.dependencies]
aiosqlite = "^0.19.0"
asyncmy = "^0.2.8"
asyncpg = "^0.28.0"
motor = "^3.3.1"
sqlalchemy = ">=2.0.0"

[tool.black]
line-length = 100
skip-string-normalization = true

[tool.isort]
profile = "black"
line_length = 100

[tool.pylint]
extension-pkg-whitelist = ["pydantic"]
load-plugins = ["pylint_quotes"]
max-line-length = 100
disable = [
    "W0613", # unused-argument
    "C0114", # missing-module-docstring
    "C0115", # missing-class-docstring
    "C0116", # missing-function-docstring
    "C0301", # line-too-long
    "W0511", # fixme
    "E0213", # no-self-argument
    "C0103", # invalid-name
    "W0707", # raise-missing-from
    "C0123", # unidiomatic-typecheck
    "W0613", # unused-argument
    "C0301", # line-too-long
    "R0903", # too-few-public-methods
    "W1203", # logging-fstring-interpolation
]

[tool.pylint.master]
init-hook='import sys; sys.path.append(".")'

[tool.ruff]
line-length = 100

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.ruff.lint]
select = [
    "D",    # pydocstyle
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "T20",  # flake8-print
]
ignore = [
    "E501", # line too long, handled by black
    "D10",  # Missing docstring
    "D203", # https://github.com/PyCQA/pydocstyle/issues/141#issuecomment-146903063
    "D212"
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.pyright]
typeCheckingMode = "basic"
reportIncompatibleMethodOverride = true
reportPrivateUsage = true
reportUnusedCoroutine = true
reportUnusedVariable = true

[tool.pytest.ini_options]
pythonpath = ["src"]
minversion = "7.2"
addopts = """
-s
-vv
-p no:logging
--cov-report=term-missing
--cov-config=pyproject.toml
--cov-fail-under=90
--no-cov-on-fail
"""
env = [
    "D:SQLALCHEMY_ECHO=false",
    "D:DATABASE_URI=sqlite+aiosqlite:///:memory:?reinitialize=true"
]
filterwarnings = [
    "error",
    "ignore:pkg_resources is deprecated as an API*:DeprecationWarning",
    "ignore::sqlalchemy.exc.MovedIn20Warning"
]
python_files = [
    "test*.py"
]

[tool.coverage.run]
concurrency = ["gevent"]  # https://stackoverflow.com/a/76033894
omit = [
    "*/settings/db/*",
    "*/settings/test.py",
    "*/tests/*"
]

[tool.coverage.report]
show_missing = true
precision = 2
exclude_lines = [
    "raise NotImplementedError"
]
